Network performance
- Shrink files
-- JS, CSS, HTML
-- images
--- File format best for job
---- SVG
----- Vector graphics
----- Expand and it will maintain sharpness and clear
----- Retina/4K displays
----- Usually simplistic things
---- JPG
----- Photos, images, lots of colours, bigger in file size
----- doesn't allow for transparency
---- PNG
----- Limit number of colours and are smaller in size
----- Logos usually
----- Can add transparency
---- GIF
----- grainy, oddly coloured, 2 - 256 colours
----- good for small animations

- Compression techniques for images:
-- Reduce PNG with TinyPNG
-- Reduce JPG with JPEG-optimizer
-- use simple illustrations instead of highly detailed photographs
-- Lower JPEG image quality (30-60%)
-- Resize image based on size it will be displayed
-- Display different sized images for different backgrounds
--- media queries in CSS
-- Use CDNS like imgix
-- Remove image metadata
--- verexif.com/en/index.php

- Delivery optimizations:
-- Limit amount of resources
--- https://stackoverflow.com/questions/985431/max-parallel-http-connections-in-a-browser
-- Critical Render Path
--- User requests page, HTML starts streaming to browser
--- if browser encounters a tag that links to another file, it will start downloading that file
--- then it creates DOM -> CSSOM -> Render Tree -> Layout -> Paint
--- After CSSOM is loaded, all DOM Content is loaded
--- JS in the header prevents DOM from downloading quicker
---- Put at bottom to give impression of improved performance
---- exceptions: analytics
-- CSS is render-blocking. Must be combined with DOM to create the Render Tree
--- want this loaded ASAP
--- Load only what is needed (one stylesheet)
--- Above the fold loading
---- const loadStyleSheet = src => {
    if (document.createStylesheet) {
        document.createStylesheet(src)
    } else {
        const stylesheet = document.createElement('link');
        stylesheet.href = src;
        stylesheet.type = 'text/css';
        document.getElementsByTagName('head')[0].appendChild(stylesheet)
    }

    window.onload = function() {
        loadStyleSheet("./style3.css");
    }
}
--- Media attributes
---- <link href="/styles.css" type="text/css" media="only screen and (min-width: 500px)">
---- media="all" by default
--- Less specificty

- after CSSOM is completed, JS is loaded
-- JS is parser-blocking
--- can use async property for scripts
---- downloads JS with another thread
---- executes before page finishes loading
---- add to external scripts that don't affect the DOM
--- can use defer property for scripts
---- will not block loading
---- executes after HTML is parsed
---- acts on render DOM/tree but not important to above-the-fold Content
--- if core functionality requires js - use async; critical scripts should load normally; otherwise use defer;
